# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bUJCf1hXobxSML5BdgDbGm7NFtgoPxPD
"""



import matplotlib.pyplot as plt
# Numpy
import numpy as np
# Pillow
from PIL import Image
# Torch
import torch
from torch.utils.data import Dataset, DataLoader
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torchvision import transforms
from datetime import datetime
from data_loader import *
from training import validation, custom_model_1

# model = Net()
checkpoint_1=torch.load("classfier_model_normal_infected.h5py") # normal and infected
model_1 =  custom_model_1(2)
model_1.to("cuda")
model_1.load_state_dict(checkpoint_1["state_dict"])
model_1.eval()
checkpoint_2=torch.load("classfier_model_covid_noncovid.h5py")
model_2= custom_model_1(2)
model_2.to("cuda")
model_2.load_state_dict(checkpoint_2["state_dict"])
model_2.eval()

label_dict = {0:"Normal", 1:"Covid infected", 2:"Non-covid infected"}
ld_val_1 = Lung_Dataset(types="val", data_args=0, classification="binary")
val_loader=DataLoader(ld_val_1, batch_size = 1, shuffle = True)

labeldict = ld_val_1.classes
# train(train_loader,val_loader,model, optimizer,labeldict,epochs=10)



imge=[]
labels=[]
pred_labels=[]

for img, label,label2 in val_loader:
    imge.append(img)
    img = img.to("cuda")
    pred_1 = model_1(img)[0]
    if int(torch.argmax(pred_1))==1:
        pred_2= model_2(img)[0]
        pred_label=int(torch.argmax(pred_2))
        if pred_label==1:
            pred_labels.append(2)
        else:
            pred_labels.append(1)
    else:
        pred_labels.append(0)
    if label==1:
        labels.append(int(label2))
    else:
        labels.append(0)
    # pred_label = int(torch.argmax(pred))
    # pred_label.append(int(torch.argmax(pred)))
    # print(img.shape)
accuracy = sum(list(map(lambda x, y: 1 if x==y else 0, labels, pred_labels)))/len(labels)
# validation_loss, accuracy = validation(model, val_loader, criterion, "cuda")

plt.figure(figsize = (20,20),dpi=300)
index=0
for i in range(4):
    for j in range(6):
      
        plt.subplot(6, 4, index+1)
        
        # Remove x-axis and y-axis ticks from plot
        plt.xticks([], [])
        plt.yticks([], [])
        
            
        # Labels for each image subplotx`
        plt.title("Ground truth: {}\n Predicted: {}".format(label_dict[int(labels[index])], label_dict[int(pred_labels[index])]),fontsize=10)
        
        # Display image
        plt.imshow(imge[index][0][0])
        index+=1
        if index >21:
          break
        
# Display full plot
plt.suptitle("Validation set pictures with predicted and ground truth labels \n Average performance: {}".format(accuracy), y=1.05)
plt.tight_layout()
plt.savefig("saved_plot.png")
# plt.show()


from sklearn.metrics import confusion_matrix
print(confusion_matrix(labels,pred_labels))